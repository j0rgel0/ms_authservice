plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.0'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.lox.authservice'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
}

// Grouped Dependencies
// Core Spring Boot Dependencies
def coreDependencies = [
		'org.springframework.boot:spring-boot-starter-actuator',
		'org.springframework.boot:spring-boot-starter-webflux',
		'org.springframework.boot:spring-boot-starter-data-r2dbc',
		'org.springframework.boot:spring-boot-starter-data-redis-reactive',
		'org.springframework.boot:spring-boot-starter-security',
		'org.springframework.boot:spring-boot-starter-validation'
]

// JWT Dependencies
def jwtDependencies = [
		'com.auth0:java-jwt:3.18.2'
]

// Spring Cloud Dependencies
def springCloudDependencies = [
		'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client',
		'org.springframework.cloud:spring-cloud-starter-config'
]

// Database Dependencies
def databaseDependencies = [
		'org.flywaydb:flyway-core',
		'org.flywaydb:flyway-database-postgresql'
]

// Redis Dependencies
def redisDependencies = [
		'redis.clients:jedis'
]

// Messaging Dependencies
def messagingDependencies = [
		'org.springframework.kafka:spring-kafka',
		'io.projectreactor.kafka:reactor-kafka'
]

// Observability Dependencies
def observabilityDependencies = [
		'io.micrometer:micrometer-registry-prometheus',
		'io.micrometer:micrometer-observation',
		'io.micrometer:micrometer-tracing-bridge-otel',
		'io.opentelemetry:opentelemetry-exporter-zipkin',
		'com.github.loki4j:loki-logback-appender:1.5.2'
]

// Development Dependencies
def developmentDependencies = [
		'org.projectlombok:lombok'
]

// Testing Dependencies
def testDependencies = [
		'org.springframework.boot:spring-boot-starter-test'
]

dependencies {
	// Core Spring Boot Dependencies
	coreDependencies.each { implementation it }

	// Spring Cloud Dependencies
	springCloudDependencies.each { implementation it }

	// Database Dependencies
	databaseDependencies.each {
		runtimeOnly it
	}
	implementation 'org.postgresql:postgresql'
	implementation 'org.postgresql:r2dbc-postgresql'

	// Redis Dependencies
	redisDependencies.each { implementation it }

	// Messaging Dependencies
	messagingDependencies.each { implementation it }

	// Observability Dependencies
	observabilityDependencies.each { implementation it }

	// Development Dependencies
	developmentDependencies.each {
		compileOnly it
		annotationProcessor it
	}

	// JWT Dependencies
	jwtDependencies.each { implementation it }

	// Testing Dependencies
	testDependencies.each { testImplementation it }


	implementation 'org.mapstruct:mapstruct:1.5.5.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

}

dependencyManagement {
	imports {
		mavenBom 'org.springframework.cloud:spring-cloud-dependencies:2024.0.0'
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

task listFilesInAuthService {
	doLast {
		def basePackage = "com/lox/authservice" // Ruta del paquete que quieres listar
		def sourceDirs = [
				file("${projectDir}/src/main/java/${basePackage}"),
				file("${projectDir}/src/main/resources/${basePackage}")
		]

		sourceDirs.each { dir ->
			if (dir.exists()) {
				println "Listado de archivos en: ${dir}"
				dir.eachFileRecurse { file ->
					if (file.isFile()) {
						def relativePath = file.path.replace(projectDir.path + File.separator, '')
						println relativePath
					}
				}
			} else {
				println "El directorio ${dir} no existe."
			}
		}
	}
}


